# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import enoki_pb2 as enoki__pb2


class EnokiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WalletCreator = channel.unary_unary(
                '/Enoki/WalletCreator',
                request_serializer=enoki__pb2.WalletCredentials.SerializeToString,
                response_deserializer=enoki__pb2.WalletCreated.FromString,
                )
        self.UsernameChanger = channel.unary_unary(
                '/Enoki/UsernameChanger',
                request_serializer=enoki__pb2.UsernameChange.SerializeToString,
                response_deserializer=enoki__pb2.UsernameChanged.FromString,
                )
        self.WalletsViewer = channel.unary_stream(
                '/Enoki/WalletsViewer',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.WalletInfo.FromString,
                )
        self.NFTCreator = channel.unary_unary(
                '/Enoki/NFTCreator',
                request_serializer=enoki__pb2.NFTCreate.SerializeToString,
                response_deserializer=enoki__pb2.NFTCreated.FromString,
                )
        self.MyNFTsViewer = channel.unary_stream(
                '/Enoki/MyNFTsViewer',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.NFTInfo.FromString,
                )
        self.NFTMinter = channel.unary_unary(
                '/Enoki/NFTMinter',
                request_serializer=enoki__pb2.NFTMint.SerializeToString,
                response_deserializer=enoki__pb2.NFTMinted.FromString,
                )
        self.MintBuyer = channel.unary_unary(
                '/Enoki/MintBuyer',
                request_serializer=enoki__pb2.MintBuy.SerializeToString,
                response_deserializer=enoki__pb2.MintBought.FromString,
                )
        self.MyMintsViewer = channel.unary_stream(
                '/Enoki/MyMintsViewer',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.MintInfo.FromString,
                )
        self.MintsViewer = channel.unary_stream(
                '/Enoki/MintsViewer',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.MintInfo.FromString,
                )
        self.MintBidder = channel.unary_unary(
                '/Enoki/MintBidder',
                request_serializer=enoki__pb2.MintBid.SerializeToString,
                response_deserializer=enoki__pb2.MintBidded.FromString,
                )
        self.BidCanceller = channel.unary_unary(
                '/Enoki/BidCanceller',
                request_serializer=enoki__pb2.BidCancel.SerializeToString,
                response_deserializer=enoki__pb2.BidCancelled.FromString,
                )
        self.MyBidsViewer = channel.unary_stream(
                '/Enoki/MyBidsViewer',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.BidInfo.FromString,
                )
        self.FlagPrinter = channel.unary_unary(
                '/Enoki/FlagPrinter',
                request_serializer=enoki__pb2.CredentialsWrapper.SerializeToString,
                response_deserializer=enoki__pb2.FlagInfo.FromString,
                )


class EnokiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def WalletCreator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UsernameChanger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WalletsViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NFTCreator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyNFTsViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NFTMinter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintBuyer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyMintsViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintsViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintBidder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidCanceller(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyBidsViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlagPrinter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnokiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WalletCreator': grpc.unary_unary_rpc_method_handler(
                    servicer.WalletCreator,
                    request_deserializer=enoki__pb2.WalletCredentials.FromString,
                    response_serializer=enoki__pb2.WalletCreated.SerializeToString,
            ),
            'UsernameChanger': grpc.unary_unary_rpc_method_handler(
                    servicer.UsernameChanger,
                    request_deserializer=enoki__pb2.UsernameChange.FromString,
                    response_serializer=enoki__pb2.UsernameChanged.SerializeToString,
            ),
            'WalletsViewer': grpc.unary_stream_rpc_method_handler(
                    servicer.WalletsViewer,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.WalletInfo.SerializeToString,
            ),
            'NFTCreator': grpc.unary_unary_rpc_method_handler(
                    servicer.NFTCreator,
                    request_deserializer=enoki__pb2.NFTCreate.FromString,
                    response_serializer=enoki__pb2.NFTCreated.SerializeToString,
            ),
            'MyNFTsViewer': grpc.unary_stream_rpc_method_handler(
                    servicer.MyNFTsViewer,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.NFTInfo.SerializeToString,
            ),
            'NFTMinter': grpc.unary_unary_rpc_method_handler(
                    servicer.NFTMinter,
                    request_deserializer=enoki__pb2.NFTMint.FromString,
                    response_serializer=enoki__pb2.NFTMinted.SerializeToString,
            ),
            'MintBuyer': grpc.unary_unary_rpc_method_handler(
                    servicer.MintBuyer,
                    request_deserializer=enoki__pb2.MintBuy.FromString,
                    response_serializer=enoki__pb2.MintBought.SerializeToString,
            ),
            'MyMintsViewer': grpc.unary_stream_rpc_method_handler(
                    servicer.MyMintsViewer,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.MintInfo.SerializeToString,
            ),
            'MintsViewer': grpc.unary_stream_rpc_method_handler(
                    servicer.MintsViewer,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.MintInfo.SerializeToString,
            ),
            'MintBidder': grpc.unary_unary_rpc_method_handler(
                    servicer.MintBidder,
                    request_deserializer=enoki__pb2.MintBid.FromString,
                    response_serializer=enoki__pb2.MintBidded.SerializeToString,
            ),
            'BidCanceller': grpc.unary_unary_rpc_method_handler(
                    servicer.BidCanceller,
                    request_deserializer=enoki__pb2.BidCancel.FromString,
                    response_serializer=enoki__pb2.BidCancelled.SerializeToString,
            ),
            'MyBidsViewer': grpc.unary_stream_rpc_method_handler(
                    servicer.MyBidsViewer,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.BidInfo.SerializeToString,
            ),
            'FlagPrinter': grpc.unary_unary_rpc_method_handler(
                    servicer.FlagPrinter,
                    request_deserializer=enoki__pb2.CredentialsWrapper.FromString,
                    response_serializer=enoki__pb2.FlagInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Enoki', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Enoki(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def WalletCreator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/WalletCreator',
            enoki__pb2.WalletCredentials.SerializeToString,
            enoki__pb2.WalletCreated.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UsernameChanger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/UsernameChanger',
            enoki__pb2.UsernameChange.SerializeToString,
            enoki__pb2.UsernameChanged.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WalletsViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Enoki/WalletsViewer',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.WalletInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NFTCreator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/NFTCreator',
            enoki__pb2.NFTCreate.SerializeToString,
            enoki__pb2.NFTCreated.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyNFTsViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Enoki/MyNFTsViewer',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.NFTInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NFTMinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/NFTMinter',
            enoki__pb2.NFTMint.SerializeToString,
            enoki__pb2.NFTMinted.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintBuyer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/MintBuyer',
            enoki__pb2.MintBuy.SerializeToString,
            enoki__pb2.MintBought.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyMintsViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Enoki/MyMintsViewer',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.MintInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintsViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Enoki/MintsViewer',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.MintInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintBidder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/MintBidder',
            enoki__pb2.MintBid.SerializeToString,
            enoki__pb2.MintBidded.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidCanceller(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/BidCanceller',
            enoki__pb2.BidCancel.SerializeToString,
            enoki__pb2.BidCancelled.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyBidsViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Enoki/MyBidsViewer',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.BidInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlagPrinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Enoki/FlagPrinter',
            enoki__pb2.CredentialsWrapper.SerializeToString,
            enoki__pb2.FlagInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
